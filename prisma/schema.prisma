// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  address   String   @unique @db.VarChar(255)
  stores    Store[]
  orders    Order[]
  session   Session?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([id, address])
}

model Store {
  id          String               @id @default(cuid())
  owner       User                 @relation(fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  name        String               @db.VarChar(255)
  description String               @db.VarChar(255)
  isActive    Boolean              @default(false)
  products    Product[]
  skills      Skill[]
  categories  CategoriesOnStores[]
}

model Product {
  id          String                 @id @default(cuid())
  description String
  minPrice    Int                    @default(0)
  maxPrice    Int                    @default(0)
  store       Store                  @relation(fields: [storeId], references: [id])
  storeId     String
  categories  CategoriesOnProducts[]
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model Order {
  id          String               @id @default(cuid())
  description String
  owner       User                 @relation(fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  feature     OrderFeature?
  categories  CategoriesOnOrders[]
  status      Status               @default(PENNDING)
}

model OrderFeature {
  id             String @id @default(cuid())
  order          Order  @relation(fields: [orderId], references: [id])
  orderId        String @unique
  maxHourlyPrice Int?
  minHourlyPrice Int?
  hourlyPerWeek  Int?
  minTotalPrice  Int?
  maxTotalPrice  Int?
  extra          Json?
}

model Skill {
  id        String   @id @default(cuid())
  title     String
  store     Store?   @relation(fields: [storeId], references: [id])
  storeId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String                 @id @default(cuid())
  name        String
  description String
  products    CategoriesOnProducts[]
  orders      CategoriesOnOrders[]
  stores      CategoriesOnStores[]
  parentId    String?
  parent      Category?              @relation("ChildCategories", fields: [parentId], references: [id])
  children    Category[]             @relation("ChildCategories")
}

model CategoriesOnProducts {
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([productId, categoryId])
}

model CategoriesOnStores {
  store      Store    @relation(fields: [storeId], references: [id])
  storeId    String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([storeId, categoryId])
}

model CategoriesOnOrders {
  order      Order    @relation(fields: [ordertId], references: [id])
  ordertId   String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([ordertId, categoryId])
}

enum Status {
  PENNDING
  ASSIGNED
  IN_PROGRESS
  ON_PAUSE
  AWAIT_APPROVAL
  DONE
  REJECTED
}

model Session {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  expiredAt DateTime
}
